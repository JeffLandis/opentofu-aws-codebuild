version: 0.2

env:
  git-credential-helper: yes
phases:
  install:
    on-failure: ABORT
    runtime-versions:
      python: 3.11
  pre_build:
    on-failure: ABORT
    commands:
      - '[[ -z $GIT_TAG ]] && image_tag=$IMAGE_TAG_DEFAULT || image_tag=$GIT_TAG'
      - echo "GIT_TAG = [ $GIT_TAG ]"
      - echo "GIT_COMMIT_ID = [ $GIT_COMMIT_ID ]"
      - echo "image_tag = [ $image_tag ]"
      - git status
      - git log | head -19
      - role_session_name="${PROJECT_NAME}.${CODEBUILD_BUILD_NUMBER}"
      - source_identity="codebuild@$(aws sts get-caller-identity --query Account --output text)"
      - assumed_role_credentials=$(aws sts assume-role --role-arn $IMAGE_REPO_ROLE_ARN --source-identity $source_identity --role-session-name $role_session_name --query 'Credentials')
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role_credentials | jq -r .AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role_credentials | jq -r .SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role_credentials | jq -r .SessionToken)
      - aws sts get-caller-identity
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $IMAGE_REPO_REGION | docker login --username AWS --password-stdin $IMAGE_REPO_ACCOUNT_ID.dkr.ecr.$IMAGE_REPO_REGION.amazonaws.com
  build:
    on-failure: ABORT
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...   
      - docker build -t $IMAGE_REPO_ACCOUNT_ID.dkr.ecr.$IMAGE_REPO_REGION.amazonaws.com/$IMAGE_REPO_NAME:$image_tag .
  post_build:
    on-failure: ABORT
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO_ACCOUNT_ID.dkr.ecr.$IMAGE_REPO_REGION.amazonaws.com/$IMAGE_REPO_NAME:$image_tag
